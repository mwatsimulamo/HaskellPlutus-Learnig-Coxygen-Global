module Main where

-- Définition du type
data PaymentMethod = Cash | Card | Crypto

-- Définition de la classe ShowSimple
class ShowSimple a where
  showSimple :: a -> String

-- Instance pour PaymentMethod
instance ShowSimple PaymentMethod where
  showSimple Cash = "Cash Payment"
  showSimple Card = "Card Payment"
  showSimple Crypto = "Crypto Payment"

-- Nouveau type
data Studentpay = FrancsCongolais | Dollars | MobileMoney

-- Classe ShowOky
class ShowOky a where
  showOky :: a -> Bool

-- Instance pour Studentpay
instance ShowOky Studentpay where
  showOky FrancsCongolais = True
  showOky Dollars = True
  showOky MobileMoney = True

-- Instance pour Int (exemple : on accepte seulement > 0)
instance ShowOky Int where
  showOky x = x > 0

-- Classe Sum
class Summable a where
  sumUp :: [a] -> a

instance Summable Int where
  sumUp [] = 0
  sumUp (x : xs) = x + sumUp xs

-- Type de Blockchain Creation
class Comparable a where
  compareWith :: a -> a -> Ordering

data Blockchain = Bitcoin | Ethereum | Cardano | Polkadot deriving (Show)

instance Comparable Blockchain where
  compareWith Bitcoin Bitcoin = EQ
  compareWith Ethereum Ethereum = EQ
  compareWith Cardano Cardano = EQ
  compareWith Polkadot Polkadot = EQ
  -- Petit TestPetit test
  compareWith Bitcoin _ = LT
  compareWith _ Bitcoin = GT
  compareWith Ethereum _ = LT
  compareWith _ Ethereum = GT
  compareWith Cardano _ = LT
  compareWith _ Cardano = GT

main :: IO ()
main = do
  putStrLn (showSimple Cash)
  putStrLn (showSimple Card)
  putStrLn (showSimple Crypto)
  print (showOky FrancsCongolais) -- True
  print (showOky Dollars) -- True
  print (showOky MobileMoney) -- True
  print (sumUp [1, 2, 3, 4, 5] :: Int) -- 15
  print (sumUp [] :: Int) -- 0
  print (sumUp [10, 20] :: Int) -- 30
  print (compareWith Bitcoin Ethereum) -- LT
  print (compareWith Ethereum Bitcoin) -- GT
  print (compareWith Cardano Cardano) -- EQ
  print (compareWith Polkadot Ethereum) -- GT
